#!/usr/bin/env perl
use warnings;
use strict;

use open ':locale';

BEGIN {
    foreach my $devdir ("$ENV{HOME}/git/dse.d/geo-modules/Geo-GTFS/lib",
			"$ENV{HOME}/git/dse.d/geo-modules/Geo-MapMaker/lib") {
	if (-d $devdir) {
	    warn("Including $devdir\n");
	    $ENV{USE_INLINE_TEMP_CACHE} = 1; # see Geo::MapMaker::Util
	    require lib;
	    import lib $devdir;
	}
    }
}

use Carp qw();
use Geo::GTFS;
use Geo::MapMaker;
use Geo::MapMaker::Config;
use Getopt::Long;

my $shell = My::Shell->new();
my $verbose = 0;
my $debug = {};
my $dry_run = 0;

Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions("show-stack-traces" => sub { $SIG{__DIE__} = \&Carp::confess; },
			 "v|verbose+" => \$verbose,
                         "n|dry-run|no-edit" => \$dry_run,
			 "D|debug=s" => sub {
			     foreach (split(/[\s,]+/, $_[1])) {
				 if (/=/) { my ($k, $v) = ($`, $');
					    warn("debug: $k => $v\n");
					    $debug->{$`} = $'; }
				 else     { warn("debug: $_ => 1\n");
					    $debug->{$_} = 1;  }
			     }
			 },
			 "h|help" => sub { $shell->cmd__help(); exit(0); });

$shell->{verbose} = $verbose;
$shell->{debug} = $debug;
$shell->{dry_run} = $dry_run;
$shell->run(@ARGV);

package My::Shell;
use warnings;
use strict;
use List::MoreUtils qw(firstidx);

sub new {
    my $class = shift();
    my $self = bless({}, $class);
    return $self;
}

sub cmd__help {
    my ($self) = @_;
    print(<<"END");
usage:
    $0 [ OPTION ... ] list-maps
    $0 [ OPTION ... ] FILENAME COMMAND [ \; COMMAND ... ]
options:
    -h, --help               display this message
        --show-stack-traces  show stack traces
where COMMAND is one of:
    osm-update
    force-osm-update
    gtfs-update
    force-gtfs-update
    gtfs-repopulate-database
    force-gtfs-repopulate-database
    draw-osm-maps
    draw-gtfs-routes
    draw-gtfs-stops
    update-css
    save-as FILENAME
    just-rewrite
    enable-layers LAYER ...
    disable-layers LAYER ...
    list-layers
END
}

sub cmd__draw_openstreetmap_maps    { goto &cmd__draw_osm_maps;    }
sub cmd__openstreetmap_update       { goto &cmd__osm_update;       }
sub cmd__force_openstreetmap_update { goto &cmd__force_osm_update; }
sub cmd__update_styles              { goto &cmd__update_css;       }

sub run {
    my ($self, @args) = @_;
    my @next;
    my $semicolon = firstidx { $_ eq ";" } @args;
    if ($semicolon != -1) {
	splice(@args, $semicolon, 1);
	@next = splice(@args, $semicolon);
    }
    my $command = shift(@args);
    if (!defined $command) {
	die("no command specified; type '$0 help' for help.\n");
    }
    if ($command =~ /\./) {	# is a filename
	unshift(@args, $command);
	$command = "map";
    }
    my $method = $self->find_method($command);
    die("no such command: '$command'; type '$0 help' for help.\n") unless $method;
    $self->$method(@args);

    if (@next) {
	$self->run(@next);
    }
}

sub find_method {
    my ($self, $command, $prefix) = @_;
    $command =~ s{-}{_}g;
    my $method_name = "cmd__" . $command;
    if (defined $prefix) {
	$method_name = "cmd_" . $prefix . "__" . $command;
    }
    return $self->can($method_name);
}

sub load_map_config {
    my ($self) = @_;
    return if $self->{maps};
    $self->{config} = Geo::MapMaker::Config->new();
    if ($self->{config}) {
	$self->{maps} = $self->{config}->{data};
    }
}

sub cmd__list_maps {
    my ($self) = @_;
    $self->load_map_config();
    foreach (sort { $a cmp $b } keys(%{$self->{maps}})) {
	print("$_\n");
    }
}

sub cmd__map {
    my ($self, $mapname, $subcommand, @args) = @_;
    die("no map name specified\n") unless defined $mapname;
    die("no subcommand specified\n") unless defined $subcommand;
    my $method = $self->find_method($subcommand);
    die("no such command: '$subcommand'\n") unless $method;
    $self->load_map_config();
    my $mapinfo = $self->{maps}->{$mapname};
    if (!$mapinfo) {
	warn("not listed in maps.yaml: '$mapname'\n");
    }
    my $mapmaker = Geo::MapMaker->new(
        filename => $mapname, $mapinfo ? %$mapinfo : (),
        verbose  => $self->{verbose},
        debug    => $self->{debug},
        no_edit  => $self->{dry_run},
    );
    $self->{mapmaker} = $mapmaker;
    $self->$method(@args);
}

sub cmd__clean {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;

    $mm->clean();
}

sub cmd__gtfs_update {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;

    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no transit data.\n");
    }
    foreach my $gtfs (@gtfs) {
	$gtfs->update();
	$gtfs->repopulate();
    }
}

sub cmd__force_gtfs_update {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;

    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no transit data.\n");
    }
    foreach my $gtfs (@gtfs) {
	$gtfs->force_update();
	$gtfs->force_repopulate();
    }
}

sub cmd__osm_update {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->update_osm();
}

sub cmd__force_osm_update {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->update_osm(1);
}

sub cmd__gtfs_repopulate_database {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no transit data.\n");
    }
    foreach my $gtfs (@gtfs) {
	$gtfs->repopulate();
    }
}

sub cmd__force_gtfs_repopulate_database {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no transit data.\n");
    }
    foreach my $gtfs (@gtfs) {
	$gtfs->force_repopulate();
    }
}

sub cmd__draw_osm_maps {
    my ($self, @args) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->update_osm();
    $mm->draw_osm_maps(@args);
}

sub cmd__draw_transit_routes { goto &cmd__draw_gtfs_routes; }
sub cmd__draw_transit_stops  { goto &cmd__draw_gtfs_stops;  }

sub cmd__draw_gtfs_routes {
    my ($self, @routes) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no gtfs data.\n");
    }
    $mm->draw_gtfs_routes(@routes);
}

sub cmd__draw_gtfs_stops {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    my @gtfs = $mm->gtfs();
    if (!scalar(@gtfs)) {
	die("map refers to no gtfs data.\n");
    }
    $mm->draw_gtfs_stops();
}

sub cmd__update_css {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->update_css();
}

sub cmd__save_as {
    my ($self, $filename) = @_;
    die("FILENAME must be specified.\n") unless defined $filename;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->save($filename);
}

sub cmd__just_rewrite {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->just_rewrite();
}

sub cmd__enable_layers {
    my ($self, @layers) = @_;
    die("at least one LAYER must be specified.\n") unless scalar @layers;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->enable_layers(@layers);
}
sub cmd__disable_layers {
    my ($self, @layers) = @_;
    die("at least one LAYER must be specified.\n") unless scalar @layers;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->disable_layers(@layers);
}
sub cmd__list_layers {
    my ($self) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    $mm->list_layers();
}

sub cmd__duplicate_layer {
    my ($self, $layerName, $newLayerName, $newLayerId, $relation) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    die("LAYERNAME must be specified.\n") unless $layerName;
    die("NEWLAYERNAME must be specified.\n") unless $newLayerName;
    die("NEWLAYERID must be specified.\n") unless $newLayerId;
    die("RELATION must be specified.\n") unless $relation;
    eval {
        $mm->duplicate_layer(
            name     => $layerName,
            new_name => $newLayerName,
            new_id   => $newLayerId,
            relation => $relation
        );
    };
    if ($@) {
        warn($@);
    }
}

sub cmd__set_filename {
    my ($self, $filename) = @_;
    my $mm = $self->{mapmaker};
    die("map MAPNAME must be specified.\n") unless $mm;
    die("FILENAME must be specified.\n") unless $filename;
    $mm->{filename} = $filename;
    $mm->{no_edit} = 0;
    $mm->{_dirty_} = 1;
}

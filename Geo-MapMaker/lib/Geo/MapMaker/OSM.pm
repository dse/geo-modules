package Geo::MapMaker::OSM;
use warnings;
use strict;
use v5.10.0;

# heh, this package is actually a mixin.  ;-)

package Geo::MapMaker;
use warnings;
use strict;
use v5.10.0;

use lib "$ENV{HOME}/git/dse.d/geo-modules/Geo-MapMaker/lib";
use Geo::MapMaker::Constants qw(:all);

use fields qw(_osm_xml_filenames
              osm_layers
              _doc

              _css_class_count

              _unused_object_tag_count
              _unused_object_tag_value_count
              _object_tag_count
              _object_tag_value_count
              _layer_object_count

              _map_tile_nodes
              _map_tile_ways
              _map_tile_relations

              _map_tile_number
              _map_tile_count);

use LWP::Simple;                # RC_NOT_MODIFIED
use List::MoreUtils qw(all uniq);
use Sort::Naturally;
use Geo::MapMaker::Dumper qw(Dumper);

use Geo::MapMaker::SVG::Point;
use Geo::MapMaker::SVG::PolyLine;
use Geo::MapMaker::SVG::Path;

use Geo::MapMaker::OSM::Node;
use Geo::MapMaker::OSM::Relation;
use Geo::MapMaker::OSM::Way;
use Geo::MapMaker::OSM::Collection;

use Geo::MapMaker::Util qw(normalize_space);

use File::Slurper qw(read_text);
use Path::Tiny;
use Encode;
use Scalar::Util qw(looks_like_number);
use Digest::SHA qw(sha1_hex);
use File::Path qw(make_path);
use File::Basename qw(dirname);
use XML::Fast;
use File::MMagic;
use IO::Uncompress::AnyUncompress qw(anyuncompress);
use Text::Trim;

# can be a regexp or an arrayref of tile numbers
our $TEST_WITH_LIMITED_TILES = 0;

# can be a sub called with a layer as its only arg
our $TEST_WITH_LIMITED_LAYERS = 0;

# mapping between object id and 1/0
our $WATCH_OBJECT_ID = {};

sub update_openstreetmap {
    my ($self, $force) = @_;
    my $source = $self->{map_data_source};
    if ($source) {
        $self->update_openstreetmap_from_source($force);
    } else {
        die("OSM XML API no longer supported\n");
    }
}

sub update_openstreetmap_from_source {
    my ($self, $force) = @_;
    my $source = $self->{map_data_source};
    if (ref $source eq 'ARRAY' || !ref $source) {
        $self->update_openstreetmap_from_source_url($force);
    }
}

sub update_openstreetmap_from_source_url {
    my ($self, $force) = @_;
    my $source = $self->{map_data_source};
    my @source;

    if (ref $source eq 'ARRAY') {
        @source = @$source;
    } else {
        @source = ($source);
    }

    my $ua = LWP::UserAgent->new();

    foreach my $source (@source) {
        if ($source =~ m{://}) {
            my $filename = $self->cache_filename($source);
            if (-e $filename && !$force) {
                $self->log_warn("Not updating\n");
                push(@{$self->{_osm_xml_filenames}}, $filename);
            } elsif (-e $filename && $force && -M $filename < 1) {
                $self->log_warn("Not updating (force in effect but file is less than 1 day old)\n");
                push(@{$self->{_osm_xml_filenames}}, $filename);
            } else {
                make_path(dirname($filename));
                $self->log_warn("Downloading %s ...\n", $source);
                my $response = $ua->mirror($source, $filename);
                my $content_type = $response->content_type;
                $self->log_warn("=> %s (%s)\n", $response->status_line, $response->content_type);
                if (!$response->is_success) {
                    exit(1);
                }
                push(@{$self->{_osm_xml_filenames}}, $filename);
            }
        } else {                # assume filename
            push(@{$self->{_osm_xml_filenames}}, $source);
        }
    }
}

sub cache_filename {
    my ($self, $url) = @_;
    return sprintf('%s/.geo-mapmaker-osm/cache/%s', $ENV{HOME}, sha1_hex($url));
}

sub update_or_create_openstreetmap_layer {
    my ($self, $map_area, $map_area_layer) = @_;
    $self->{_dirty_} = 1;
    my $layer = $self->update_or_create_layer(name => "OpenStreetMap",
                                              class => "openStreetMapLayer",
                                              id => $map_area->{id_prefix} . "openStreetMapLayer",
                                              z_index => 100,
                                              parent => $map_area_layer,
                                              autogenerated => 1);
    return $layer;
}

sub get_xml_string {
    my ($self, $filename) = @_;
    my $mm = File::MMagic->new();
    my $mime_type = $mm->checktype_filename($filename);
    if ($mime_type eq 'text/plain') {
        return path($filename)->slurp();
    }
    if ($mime_type eq 'application/x-gzip') {
        $self->log_warn("Uncompressing %d bytes...\n", (-s $filename));
        my $data;
        my $status = anyuncompress($filename => \$data);
        if (!$status) {
            die(sprintf("uncompress failed: %s\n",
                        $IO::Uncompress::AnyUncompress::AnyUncompressError));
        }
        $self->log_warn("  got %d bytes\n", length $data);
        return $data;
    }
    say $mime_type;
    exit(0);
}

sub draw_openstreetmap_maps {
    my ($self) = @_;

    local $TEST_WITH_LIMITED_TILES  = $TEST_WITH_LIMITED_TILES;
    local $TEST_WITH_LIMITED_LAYERS = $TEST_WITH_LIMITED_LAYERS;
    local $WATCH_OBJECT_ID          = $WATCH_OBJECT_ID;

    if ($ENV{TEST_MAPMAKER_OSM_PERFORMANCE}) {
        $TEST_WITH_LIMITED_TILES = 16;
    }

    local $self->{log_prefix} = $self->{log_prefix} . '(drawing) ';

    if (!$self->{no_edit}) {
        $self->init_xml();
        $self->{_dirty_} = 1;
        $self->stuff_all_layers_need();

        foreach my $map_area (@{$self->{_map_areas}}) {
            my $prefix = $map_area->{id_prefix};
            my $map_area_layer = $self->update_or_create_map_area_layer($map_area);
            my $clip_path_id = $map_area->{clip_path_id};
            my $osm_layer = $self->update_or_create_openstreetmap_layer($map_area,
                                                                        $map_area_layer);
            $self->erase_autogenerated_content_within($osm_layer);
            foreach my $osm_layer_info (@{$self->{osm_layers}}) {
                my $layer_class    = $osm_layer_info->{class};
                my $layer_id       = $osm_layer_info->{id};
                my $layer_geometry = $osm_layer_info->{geometry};
                my $layer_id_class;

                if (defined $layer_id) {
                    $layer_id_class = $layer_id;
                    if ($layer_id_class !~ m{^osm-layer-}) {
                        $layer_id_class = 'osm-layer-' . $layer_id_class;
                    }
                }

                my @css_classes;
                push(@css_classes, grep { m{\S} } split(' ', $layer_class)) if defined $layer_class;
                push(@css_classes, 'osm-layer');
                push(@css_classes, $layer_id_class)                         if defined $layer_id_class;
                push(@css_classes, 'osm-geometry-' . $layer_geometry)       if defined $layer_geometry;
                my $css_classes = (scalar @css_classes) ? join(' ', @css_classes) : undef;

                my $layer = $self->update_or_create_layer(name => $osm_layer_info->{name},
                                                          id => $layer_id,
                                                          parent => $osm_layer,
                                                          class => $css_classes,
                                                          insensitive => 1,
                                                          autogenerated => 1,
                                                          children_autogenerated => 1);
                my $group = $self->find_or_create_clipped_group(parent => $layer,
                                                                class => $osm_layer_info->{group_class},
                                                                style => $osm_layer_info->{group_style},
                                                                clip_path_id => $clip_path_id);
                $group->removeChildNodes(); # OK
                $osm_layer_info->{_map_area_layer} //= [];
                $osm_layer_info->{_map_area_group} //= [];
                push(@{$osm_layer_info->{_map_area_layer}}, $layer);
                push(@{$osm_layer_info->{_map_area_group}}, $group);
            }
        }
    }

    if ($TEST_WITH_LIMITED_LAYERS) {
        if (ref $TEST_WITH_LIMITED_LAYERS eq 'SUB') {
            @{$self->{osm_layers}} = grep { $TEST_WITH_LIMITED_LAYERS->() } @{$self->{osm_layers}};
        } else {
            @{$self->{osm_layers}} = grep { $_->{name} =~ m{river}i } @{$self->{osm_layers}};
        }
    }

    my $num_xml_files = scalar(@{$self->{_osm_xml_filenames}});

    foreach my $layer (@{$self->{osm_layers}}) {
        $layer->{type} //= { way => 1, relation => 1 };
        $self->index_layer_tags($layer);
        $layer->{persistent_objects} = Geo::MapMaker::OSM::Collection->new(); # persistent objects
        $layer->{objects} = Geo::MapMaker::OSM::Collection->new(); # subset of persistent objects used directly
    }

    local $self->{_map_tile_number} = 0;
    local $self->{_map_tile_count} = scalar @{$self->{_osm_xml_filenames}};
    local $self->{_css_class_count} = {};

    local $self->{_unused_object_tag_count} = {};
    local $self->{_unused_object_tag_value_count} = {};
    local $self->{_object_tag_count} = {};
    local $self->{_object_tag_value_count} = {};
    local $self->{_layer_object_count} = {};

    foreach my $filename (@{$self->{_osm_xml_filenames}}) {
        $self->{_map_tile_number} += 1;

        local $self->{log_prefix} = $self->{log_prefix} .
            sprintf('(%d/%d) ', $self->{_map_tile_number}, $self->{_map_tile_count});

        if ($TEST_WITH_LIMITED_TILES) {
            if (looks_like_number($TEST_WITH_LIMITED_TILES)) {
                last if $self->{_map_tile_number} > $TEST_WITH_LIMITED_TILES;
            } elsif (ref $TEST_WITH_LIMITED_TILES eq 'ARRAY') {
                next unless grep { $self->{_map_tile_number} == $_ } @$TEST_WITH_LIMITED_TILES;
            }
        }

        $self->log_warn("Reading %s ...\n", $filename);

        my $doc = $self->get_xml_string($filename);

        if ($TEST_WITH_LIMITED_TILES) {
            if (lc(ref $TEST_WITH_LIMITED_TILES) eq 'regexp') {
                next unless $doc =~ $TEST_WITH_LIMITED_TILES;
            }
        }

        $self->log_warn("Parsing XML ...\n");
        local $self->{_doc} = xml2hash($doc, array => 1);

        $self->log_warn("done.\n");

        # all objects for each map tile
        local $self->{_map_tile_nodes}     = Geo::MapMaker::OSM::Collection->new();
        local $self->{_map_tile_ways}      = Geo::MapMaker::OSM::Collection->new();
        local $self->{_map_tile_relations} = Geo::MapMaker::OSM::Collection->new();

        foreach my $layer (@{$self->{osm_layers}}) {
            # filtered objects for each map tile
            $layer->{map_tile_objects} = Geo::MapMaker::OSM::Collection->new();
        }

        $self->load_map_tile_objects();
        $self->convert_map_tile_tags();
        $self->collect_map_tile_layer_objects();
        $self->link_map_tile_objects();
        $self->convert_coordinates();
    }

    $self->{_map_tile_number} = undef;
    $self->{_map_tile_count} = undef;

    if (!$self->{no_edit}) {
        $self->draw();
    }

    $self->log_warn("  Writing unused object tag and tag=value counts ...\n");
    $self->write_object_tag_counts(0);
    $self->write_object_tag_value_counts(0);
    $self->log_warn("  Writing object tag and tag=value counts ...\n");
    $self->write_object_tag_counts(1);
    $self->write_object_tag_value_counts(1);
    $self->log_warn("  Writing layer object counts ...\n");
    $self->write_layer_object_counts();
    $self->log_warn("  Done.\n");

    $self->log_warn("draw_openstreetmap_maps is done\n");
}

sub load_map_tile_objects {
    my $self = shift;
    $self->log_warn("Loading map tile objects (%d nodes, %d ways, and %d relations) ...\n",
                    scalar @{$self->{_doc}->{osm}->[0]->{node}},
                    scalar @{$self->{_doc}->{osm}->[0]->{way}},
                    scalar @{$self->{_doc}->{osm}->[0]->{relation}});
    my $nc = 0;
    my $wc = 0;
    my $rc = 0;
    foreach my $node (@{$self->{_doc}->{osm}->[0]->{node}}) {
        $node = Geo::MapMaker::OSM::Node->new($node);
        $self->{_map_tile_nodes}->add($node);
        $nc += 1;
        # delete $node->{-changeset};
        # delete $node->{-timestamp};
        # delete $node->{-uid};
        # delete $node->{-user};
        # delete $node->{-version};
        # delete $node->{-visible};
        $node->{type} = 'node';
    }
    $self->log_debug("  %d nodes\n", $nc);

    foreach my $way (@{$self->{_doc}->{osm}->[0]->{way}}) {
        $way = Geo::MapMaker::OSM::Way->new($way);
        $self->{_map_tile_ways}->add($way);
        $wc += 1;
        # delete $way->{-changeset};
        # delete $way->{-timestamp};
        # delete $way->{-uid};
        # delete $way->{-user};
        # delete $way->{-version};
        # delete $way->{-visible};
        $way->{type} = 'way';
    }
    $self->log_debug("  %d ways\n", $wc);

    foreach my $relation (@{$self->{_doc}->{osm}->[0]->{relation}}) {
        $relation = Geo::MapMaker::OSM::Relation->new($relation);
        $self->{_map_tile_relations}->add($relation);
        $rc += 1;
        # delete $relation->{-changeset};
        # delete $relation->{-timestamp};
        # delete $relation->{-uid};
        # delete $relation->{-user};
        # delete $relation->{-version};
        # delete $relation->{-visible};
        $relation->{type} = 'relation';
    }
    $self->log_debug("  %d relations\n", $rc);

    $self->log_warn("Done.\n");
}

sub convert_map_tile_tags {
    my ($self) = @_;
    my $count =
        $self->{_map_tile_nodes}->count() +
        $self->{_map_tile_ways}->count() +
        $self->{_map_tile_relations}->count();
    $self->log_warn("Converting tags on %d objects ...\n", $count);
    if (grep { $_->{type}->{node} } @{$self->{osm_layers}}) {
        foreach my $node ($self->{_map_tile_nodes}->objects) {
            $node->convert_tags();
        }
    }
    foreach my $way ($self->{_map_tile_ways}->objects) {
        $way->convert_tags();
    }
    foreach my $relation ($self->{_map_tile_relations}->objects) {
        $relation->convert_tags();
    }
    $self->log_warn("Done.\n");
}

sub index_layer_tags {
    my ($self, $layer) = @_;
    my $index = $layer->{index} = [];
    foreach my $tag (@{$layer->{tags}}) {
        my $k = $tag->{k};
        my $v = $tag->{v};
        if (defined $v) {
            if (ref $v eq 'ARRAY') {
                foreach my $v (@$v) {
                    push(@$index, join($;, $k, $v));
                }
            } elsif ($v ne '') {
                push(@$index, join($;, $k, $v));
            }
        } else {
            push(@$index, $k);
        }
    }
}

sub convert_coordinates {
    my ($self) = @_;
    $self->log_warn("Converting coordinates ...\n");
    foreach my $map_area (@{$self->{_map_areas}}) {
        my $map_area_index = $map_area->{index};
        foreach my $layer (@{$self->{osm_layers}}) {
            foreach my $relation (grep { $_->{type} eq 'relation' } $layer->{objects}->objects) {
                foreach my $way (@{$relation->{way_array}}) {
                    foreach my $node (@{$way->{node_array}}) {
                        $node->{svg_coords}->[$map_area_index] ||= $self->convert_node_coordinates($node);
                    }
                }
            }
            foreach my $way (grep { $_->{type} eq 'way' } $layer->{objects}->objects) {
                foreach my $node (@{$way->{node_array}}) {
                    $node->{svg_coords}->[$map_area_index] ||= $self->convert_node_coordinates($node);
                }
            }
            foreach my $node (grep { $_->{type} eq 'node' } $layer->{objects}->objects) {
                $node->{svg_coords}->[$map_area_index] ||= $self->convert_node_coordinates($node);
            }
        }
    }
    $self->log_warn("Done.\n");
}

sub convert_node_coordinates {
    my ($self, $node) = @_;
    my $lon_deg = 0 + $node->{-lon};
    my $lat_deg = 0 + $node->{-lat};
    my ($svgx, $svgy) = $self->lon_lat_deg_to_svg($lon_deg, $lat_deg);

    my $west_svg  = $self->west_outer_map_boundary_svg;
    my $east_svg  = $self->east_outer_map_boundary_svg;
    my $north_svg = $self->north_outer_map_boundary_svg;
    my $south_svg = $self->south_outer_map_boundary_svg;

    my $xzone = ($svgx < $west_svg)  ? -1 : ($svgx > $east_svg)  ? 1 : 0;
    my $yzone = ($svgy < $north_svg) ? -1 : ($svgy > $south_svg) ? 1 : 0;
    my $result = [$svgx, $svgy, $xzone, $yzone];
    return $result;
}

use vars qw(%NS);

sub draw {
    my ($self) = @_;
    $self->log_warn("Drawing into map ...\n");
    foreach my $map_area (@{$self->{_map_areas}}) {
        my $map_area_index = $map_area->{index};
        my $map_area_name = $map_area->{name};
        $self->log_warn("  Drawing into map area $map_area_index - $map_area_name ...\n");
        foreach my $layer (@{$self->{osm_layers}}) {
            my $layer_name     = $layer->{name};
            my $layer_group    = $layer->{_map_area_group}[$map_area_index];
            my $layer_id       = $layer->{id};
            my $layer_geometry = $layer->{geometry};

            my @objects = $layer->{objects}->objects;
            $self->log_warn("    Adding %d objects to layer $layer_name ...\n", scalar @objects);
            foreach my $object (@objects) {

                my $css_class_string = $object->css_class_string(
                    layer => $layer,
                    map_area => $map_area,
                );

                my $css_id = $object->css_id(
                    layer => $layer,
                    map_area => $map_area,
                );
                my $attr = {};
                $attr->{'data-name'} = $object->{tags}->{name} if defined $object->{tags}->{name};

                my $svg_element;
                if ($object->is_multipolygon_relation) {
                    my $path = $object->svg_object(map_area_index => $map_area_index);
                    next unless $path;
                    $svg_element = $self->svg_path(
                        path => $path,
                        class => $css_class_string,
                        attr => $attr,
                        id => $css_id,
                        map_area_index => $map_area_index,
                    );
                } elsif ($object->isa('Geo::MapMaker::OSM::Relation')) {
                    my $path = $object->svg_object(map_area_index => $map_area_index);
                    next unless $path;
                    $svg_element = $self->svg_path(
                        path => $path,
                        class => $css_class_string,
                        attr => $attr,
                        id => $css_id,
                        map_area_index => $map_area_index,
                    );
                } elsif ($object->{type} eq 'way') {
                    my $polyline = $object->svg_object(map_area_index => $map_area_index);
                    next unless $polyline;
                    $svg_element = $self->svg_path(
                        polyline => $polyline,
                        class => $css_class_string,
                        attr => $attr,
                        id => $css_id,
                        map_area_index => $map_area_index,
                    );
                }
                if ($svg_element) {
                    $layer_group->appendChild($svg_element);
                }
            }
        }
    }
    $self->log_warn("Done.\n");
}

sub collect_map_tile_layer_objects {
    my ($self) = @_;
    my $count = 0;
    $self->log_warn("Collecting objects for layers ...\n");
    foreach my $layer (@{$self->{osm_layers}}) {
        my @objects;
        push(@objects, $self->{_map_tile_nodes}->objects)     if $layer->{type}->{node};
        push(@objects, $self->{_map_tile_ways}->objects)      if $layer->{type}->{way};
        push(@objects, $self->{_map_tile_relations}->objects) if $layer->{type}->{relation};
        foreach my $object (@objects) {
            my $match = 0;
            foreach my $index (@{$layer->{index}}) {
                if ($object->{index}->{$index}) {
                    $match = 1;
                    last;
                }
            }
            next unless $match;

            $object->{used} = 1;
            # $object->{used_directly} = 1;

            $layer->{persistent_objects}->add($object);

            # objects used directly
            $layer->{objects}->add($object);

            # current objects, from which we pull any ways not found
            # in previously pulled relations
            $layer->{map_tile_objects}->add_override($object);

            $self->count_layer_object($layer, $object);

            $count += 1;
        }
    }
    if (grep { $_->{type}->{node} } @{$self->{osm_layers}}) {
        foreach my $node ($self->{_map_tile_nodes}->objects) {
            $self->count_object_tags($node, $node->{used} ? 1 : 0);
        }
    }
    if (grep { $_->{type}->{way} } @{$self->{osm_layers}}) {
        foreach my $way ($self->{_map_tile_ways}->objects) {
            $self->count_object_tags($way, $way->{used} ? 1 : 0);
        }
    }
    if (grep { $_->{type}->{relation} } @{$self->{osm_layers}}) {
        foreach my $relation ($self->{_map_tile_relations}->objects) {
            $self->count_object_tags($relation, $relation->{used} ? 1 : 0);
        }
    }
    $self->log_warn("Done.  Added %d objects.\n", $count);
}

sub count_layer_object {
    my ($self, $layer, $object) = @_;
    my $type = $object->{type};
    $self->{_layer_object_count}->{$layer->{id} // $layer->{name}}->{TOTAL} += 1;
    $self->{_layer_object_count}->{$layer->{id} // $layer->{name}}->{$type} += 1;
}

sub count_object_tags {
    my ($self, $object, $used_flag) = @_;
    my $type = $object->{type};
  tag:
    foreach my $k (keys %{$object->{tags}}) {
        next if $EXCLUDE_TAG_NAMES->{$k};
        foreach my $exclude (@EXCLUDE_TAG_NAMES) {
            next tag if ref $exclude eq 'Regexp' && $k =~ $exclude;
        }
        my $v = $object->{tags}->{$k};
        next unless $TAG_NAME_WHITELIST->{$k} || $TAG_NAME_VALUE_WHITELIST->{"${k}=${v}"};
        if ($used_flag) {
            $self->{_object_tag_count}->{$type}->{$k} += 1;
            $self->{_object_tag_value_count}->{$type}->{$k}->{$v} += 1;
        } else {
            $self->{_unused_object_tag_count}->{$type}->{$k} += 1;
            $self->{_unused_object_tag_value_count}->{$type}->{$k}->{$v} += 1;
        }
    }
}

sub stats_filename {
    my ($self, $stats_filename) = @_;
    my $basename = basename($self->{filename});
    my $dirname  = dirname($self->{filename});
    return sprintf('%s/%s--%s', $dirname, $basename, $stats_filename);
}

sub write_layer_object_counts {
    my ($self) = @_;
    my $fh;
    my $filename = $self->stats_filename('layer-object-counts.txt');
    open($fh, '>', $filename) or return;
    my $hash = $self->{_layer_object_count};
    print $fh ("#TOTAL   Nodes    Ways  Reltns  Layer Name\n");
    print $fh ("#-----  ------  ------  ------  -----------------------------------------------\n");
    foreach my $layer (@{$self->{osm_layers}}) {
        my $id = $layer->{id};
        my $name = $layer->{name};
        my $key = $layer->{id} // $layer->{name};
        my $display = '?';
        if (defined $id && defined $name) {
            $display = "$name ($id)"
        } elsif (defined $id) {
            $display = "($id)"
        } elsif (defined $name) {
            $display = "$name"
        }
        my $total_count = $hash->{$key}->{TOTAL} // 0;
        my $node_count = $hash->{$key}->{node} // 0;
        my $way_count = $hash->{$key}->{way} // 0;
        my $relation_count = $hash->{$key}->{relation} // 0;
        printf $fh ("%6d  %6d  %6d  %6d  %s\n",
                    $total_count, $node_count, $way_count, $relation_count,
                    normalize_space($display));
    }
}

sub write_object_tag_counts {
    my ($self, $used_flag) = @_;
    my $fh;
    my $filename;
    my $hash;
    if ($used_flag) {
        $filename = $self->stats_filename('object-tag-counts.txt');
        $hash = $self->{_object_tag_count};
    } else {
        $filename = $self->stats_filename('unused-object-tag-counts.txt');
        $hash = $self->{_unused_object_tag_count};
    }
    open($fh, '>', $filename) or return;
    $self->log_warn("    Writing $filename ...\n");
    foreach my $type (nsort keys %$hash) {
        my $subhash = $hash->{$type};
        foreach my $key (nsort keys %$subhash) {
            printf $fh ("%6d  %-14s  %s\n", $subhash->{$key}, $type, $key);
        }
    }
}
sub write_object_tag_value_counts {
    my ($self, $used_flag) = @_;
    my $fh;
    my $filename;
    my $hash;
    if ($used_flag) {
        $filename = $self->stats_filename('object-tag-value-counts.txt');
        $hash = $self->{_object_tag_value_count};
    } else {
        $filename = $self->stats_filename('unused-object-tag-value-counts.txt');
        $hash = $self->{_unused_object_tag_value_count};
    }
    open($fh, '>', $filename) or return;
    $self->log_warn("    Writing $filename ...\n");
    foreach my $type (nsort keys %$hash) {
        my $subhash = $hash->{$type};
        foreach my $key (nsort keys %$subhash) {
            my $subsubhash = $subhash->{$key};
            foreach my $value (nsort keys %$subsubhash) {
                printf $fh ("%6d  %-14s  %-22s  %s\n", $subsubhash->{$value}, $type, $key, normalize_space($value));
            }
        }
    }
}

sub link_map_tile_objects {
    my ($self) = @_;
    $self->log_warn("Linking objects ...\n");
    my $count = 0;
    foreach my $layer (@{$self->{osm_layers}}) {
        foreach my $relation (grep { $_->{type} eq 'relation' } $layer->{map_tile_objects}->objects) {
            my $id = $relation->{-id};
            my $relation = $self->find_persistent_object($layer, $relation);
            $self->link_relation_object($layer, $id, $relation);
            $count += 1;
        }
        foreach my $way (grep { $_->{type} eq 'way' } $layer->{map_tile_objects}->objects) {
            my $id = $way->{-id};
            my $way = $self->find_persistent_object($layer, $way);
            $self->link_way_object($layer, $id, $way);
            $count += 1;
        }
    }
    $self->log_warn("Done.  Linked %d objects.\n", $count);
}

sub find_persistent_object {
    my ($self, $layer, $object) = @_;
    if (!$object) {
        return;
    }
    if (!ref $object) {
        my $id = $object;
        return $layer->{persistent_objects}->get($id);
    }
    my $id = $object->{-id};
    if ($layer->{persistent_objects}->has($id)) {
        return $layer->{persistent_objects}->get($id);
    }
    $layer->{persistent_objects}->add($object);
    return $object;
}

sub link_relation_object {
    my ($self, $layer, $relation_id) = @_;

    my $relation = $layer->{persistent_objects}->get($relation_id); # persistent

    # current objects, where we get way_ids from to merge them in
    # because not all relation objects across tiles have the same list
    # of ways
    my $map_tile_relation = $layer->{map_tile_objects}->get($relation_id);

    # store ways in persistent objects
    $relation->{way_hash} //= {};
    $relation->{way_id_is_outer} //= {};
    $relation->{way_id_is_inner} //= {};

    my @way_ids       = map { $_->{-ref} } grep { eval { $_->{-type} eq 'way' && defined $_->{-ref} } } @{$map_tile_relation->{member}};
    my @outer_way_ids = map { $_->{-ref} } grep { eval { $_->{-role} eq 'outer' && $_->{-type} eq 'way' && defined $_->{-ref} } } @{$map_tile_relation->{member}};
    my @inner_way_ids = map { $_->{-ref} } grep { eval { $_->{-role} eq 'inner' && $_->{-type} eq 'way' && defined $_->{-ref} } } @{$map_tile_relation->{member}};

    foreach my $id (@outer_way_ids) {
        $relation->{way_id_is_outer}->{$id} = 1;
    }
    foreach my $id (@inner_way_ids) {
        $relation->{way_id_is_inner}->{$id} = 1;
    }

    foreach my $id (@way_ids) {
        my $way = $self->{_map_tile_ways}->get($id);
        if ($way) {
            $way = $self->find_persistent_object($layer, $way);
        } else {
            $way = $self->find_persistent_object($layer, $id);
        }
        if ($way) {
            $relation->{way_hash}->{$id} = $way;
        } else {
            # do nothing
        }
    }

    @{$relation->{way_array}} =
        grep { $_ } map { $relation->{way_hash}->{$_} } sort { $a <=> $b } keys %{$relation->{way_hash}};
    @{$relation->{outer_way_array}} = grep { $relation->{way_id_is_outer}->{$_->{-id}} } @{$relation->{way_array}};
    @{$relation->{inner_way_array}} = grep { $relation->{way_id_is_inner}->{$_->{-id}} } @{$relation->{way_array}};
    @{$relation->{other_way_array}} =
        grep { !$relation->{way_id_is_inner}->{$_->{-id}} && !$relation->{way_id_is_outer}->{$_->{-id}} }
        @{$relation->{way_array}};

    foreach my $way (@{$relation->{way_array}}) {
        $self->link_way_object($layer, $way->{-id}, $way);
    }
}

sub link_way_object {
    my ($self, $layer, $way_id, $way) = @_;

    $way ||= $layer->{persistent_objects}->get($way_id);

    $way->{node_hash} //= {};

    my @node_ids = map { $_->{-ref} } @{$way->{nd}};
    $way->{node_ids} = \@node_ids; # should always be the same

    foreach my $node_id (@node_ids) {
        my $node = $self->{_map_tile_nodes}->get($node_id);
        if ($node) {
            $node = $self->find_persistent_object($layer, $node);
        } else {
            $node = $self->find_persistent_object($layer, $node_id);
        }
        if ($node) {
            $way->{node_hash}->{$node_id} = $node;
        } else {
            # do nothing
        }
    }

    @{$way->{node_array}} =
        grep { $_ }
        map { $self->find_persistent_object($layer, $way->{node_hash}->{$_}) }
        @{$way->{node_ids}};

    if ($way->is_complete()) {
        if ($way->is_self_closing()) {
            $way->{is_closed} = 1;
            if ($way->{tags} && defined $way->{tags}->{area} && $way->{tags}->{area} eq 'yes') {
                $way->{is_area} = 1;
            } elsif (!exists $way->{tags}->{highway} && !exists $way->{tags}->{barrier}) {
                $way->{is_area} = 1;
            }
            # Normally a way with highway=* or barrier=* is a closed
            # polyline that's not filled.  However, if area=yes is
            # specified, it can be filled.
        } else {
            $way->{is_closed} = 0;
        }
    } else {
        $way->{is_closed} = 0;
    }
}

1;

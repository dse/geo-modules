#!/usr/bin/perl
use warnings;
use strict;

BEGIN {
	foreach my $devdir ("$ENV{HOME}/git/geo-modules/Geo-GTFS/lib") {
		if (-d $devdir) {
			warn("Including $devdir\n");
			$ENV{USE_INLINE_TEMP_CACHE} = 1;
			require lib;
			import lib $devdir;
		}
	}
}

use Carp qw();
use Geo::GTFS;
use Getopt::Long;
use File::Basename;
use File::Spec;

my $shell = My::GTFS::Shell->new();

Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions("show-stack-traces" => sub { $SIG{__DIE__} = \&Carp::confess; },
			 "v|verbose+" => sub { ++$shell->{verbose} },
			 "D|debug=s" => sub {
				 foreach (split(/[\s,]+/, $_[1])) {
					 if (/=/) { my ($k, $v) = ($`, $');
						    warn("debug: $k => $v\n");
						    $shell->{debug}->{$`} = $'; }
					 else     { warn("debug: $_ => 1\n");
						    $shell->{debug}->{$_} = 1;  }
				 }
			 },
			 "h|help" => sub { $shell->help(); exit(0); })
	or die("Type '$0 --help' for help.\n");

$shell->run(@ARGV);

package My::GTFS::Shell;
use YAML::Syck;
use File::Basename;
use List::MoreUtils;
use File::Path qw(make_path);
sub new {
	my ($class, %args) = @_;
	my $self = bless({%args}, $class);
	$self->init();
	return $self;
}
sub init {
	my ($self) = @_;
	my $aliases_file = $self->{aliases_file} = $ENV{HOME} . "/.geo-gtfs/aliases";
	if (-e $self->{aliases_file}) {
		$self->{aliases} = LoadFile($self->{aliases_file});
	} else {
		$self->{aliases} = {};
	}
	$self->{url_regex} = qr{^(https?|ftp)://};
	$self->{verbose} = 0;
	$self->{debug} = {};
}
sub DESTROY {
	my ($self) = @_;
	my $aliases_file = $self->{aliases_file};
	make_path(dirname($aliases_file));
	DumpFile($aliases_file, $self->{aliases});
}
sub help {
	my ($self) = @_;
	print(<<"END");
usage: $0 [OPTION ...] COMMAND [ARG ...]
commands:
	kml GTFS-URL             -- spits out some KML.
	alias                    -- lists aliases
	alias GTFS-URL ALIAS ... -- adds aliases
	delete-alias ALIAS ...   -- removes aliases

        update URL|ALAIS
        repopulate URL|ALIAS

        list-agencies URL|ALIAS
        list-routes URL|ALIAS
END
}
sub run {
	my ($self, $command, @args) = @_;
	if (!defined $command) {
		warn("$0: no command specified\n");
		return undef;
	}
	my $method = $self->method($command);
	if (!$method) {
		warn("$0: no such command: '$command'\n");
		return undef;
	}
	$self->$method(@args);
}
sub method {
	my ($self, $command) = @_;
	$command =~ s{-}{_}g;
	return $self->can("cmd__$command");
}
sub get_gtfs_url {
	my ($self, $what) = @_;
	my $alias;
	my $url;
	if ($what =~ $self->{url_regex}) {
		$url = $what;
	} else {
		$alias = $what;
		$url = $self->{aliases}->{$alias};
		if (!$url) {
			warn("$0: '$what' is neither an alias nor a URL\n");
			return undef;
		}
	}
	return $url;
}
sub gtfs {
	my ($self, $url) = @_;
	$self->{gtfs} //= {};
	my $gtfs = $self->{gtfs}->{url} //= Geo::GTFS->new($url);
	$gtfs->{verbose} = $self->{verbose};
	#$gtfs->{debug}   = $self->{debug};
	return $gtfs;
}
sub cmd__kml {
	my ($self, $what) = @_;
	my $url = $self->get_gtfs_url($what);
	return undef unless defined $url;
	my $gtfs = $self->gtfs($url);
	my $doc = $gtfs->kml();
	print $doc->toString(1);
}
sub cmd__update {
	my ($self, $what) = @_;
	my $url = $self->get_gtfs_url($what);
	return undef unless defined $url;
	my $gtfs = $self->gtfs($url);
	$gtfs->update();
	$gtfs->force_repopulate();
	return 1;
}
sub cmd__repopulate {
	my ($self, $what) = @_;
	my $url = $self->get_gtfs_url($what);
	return undef unless defined $url;
	my $gtfs = $self->gtfs($url);
	$gtfs->force_repopulate();
	return 1;
}
sub cmd__alias {
	my ($self, @args) = @_;
	if (!scalar @args) {
		print Dump($self->{aliases});
		return 1;
	}
	my $url_regex = $self->{url_regex};
	my @url = grep { $_ =~ $url_regex } @args;
	if (!scalar @url) {
		warn("$0: alias: no URL specified\n");
		return undef;
	} elsif (scalar @url > 1) {
		warn("$0: alias: more than one URL specified\n");
		return undef;
	}
	my ($url) = @url;
	my @aliases = grep { $_ !~ $url_regex } @args;
	foreach my $alias (@aliases) {
		$self->{aliases}->{$alias} = $url;
	}
	return 1;
}
sub cmd__delete_alias {
	my ($self, @args) = @_;
	foreach my $alias (@args) {
		delete $self->{aliases}->{alias};
	}
	return 1;
}
sub cmd__list_agencies {
	my ($self, $what) = @_;
	my $url = $self->get_gtfs_url($what);
	return undef unless defined $url;
	my $gtfs = $self->gtfs($url);
	my @agencies = $gtfs->select_all_agencies();
	print Dump(@agencies);
}
sub cmd__list_routes {
	my ($self, $what) = @_;
	my $url = $self->get_gtfs_url($what);
	return undef unless defined $url;
	my $gtfs = $self->gtfs($url);
	my @routes = $gtfs->select_all_routes();
	print Dump(@routes);
}
1;
